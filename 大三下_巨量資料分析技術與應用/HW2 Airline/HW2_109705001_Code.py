# -*- coding: utf-8 -*-
"""HW2_109705001_Code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IPEFM8LcLk67NtDn7eaXosfjnh_I7Puy
"""

from google.colab import drive
drive.mount('/content/gdrive')

# copy all files from Google drive to current directory
!cp -r ./gdrive/MyDrive/BigData/HW2/* .

!apt-get -y install openjdk-8-jre-headless
!pip install pyspark

import pandas as pd
import numpy as np
import pyspark.pandas as ps
from pyspark.sql import SparkSession
from pyspark.sql.types import StructType, StructField, StringType, IntegerType
spark = SparkSession.builder.getOrCreate()

"""## Load Data ============================================================="""

customSchema = StructType([
    StructField("Year", IntegerType(), True),  
    StructField("Month", IntegerType(), True),  
    StructField("DayofMonth", IntegerType(), True),  
    StructField("DayOfWeek", IntegerType(), True),  
    StructField("DepTime", IntegerType(), True),  
    StructField("CRSDepTime", IntegerType(), True),  
    StructField("ArrTime", IntegerType(), True),  
    StructField("CRSArrTime", IntegerType(), True),  
    StructField("UniqueCarrier", StringType(), True),  
    StructField("FlightNum", IntegerType(), True),
    StructField("TailNum", StringType(), True), 
    StructField("ActualElapsedTime", IntegerType(), True),  
    StructField("CRSElapsedTime", IntegerType(), True),  
    StructField("AirTime", IntegerType(), True),  
    StructField("ArrDelay", IntegerType(), True),  
    StructField("DepDelay", IntegerType(), True),  
    StructField("Origin", StringType(), True),  
    StructField("Dest", StringType(), True),         
    StructField("Distance", StringType(), True),
    StructField("TaxiIn", IntegerType(), True),
    StructField("TaxiOut", IntegerType(), True),         
    StructField("Cancelled", StringType(), True),
    StructField("CancellationCode", IntegerType(), True),         
    StructField("Diverted", StringType(), True),
    StructField("CarrierDelay", IntegerType(), True),
    StructField("WeatherDelay", IntegerType(), True),         
    StructField("NASDelay", StringType(), True),
    StructField("SecurityDelay", IntegerType(), True),  
    StructField("LateAircraftDelay", IntegerType(), True)
])

df0=spark.read.csv('./data/2000.csv', header=True, schema=customSchema)
df1=spark.read.csv('./data/2001.csv', header=True, schema=customSchema)
df2=spark.read.csv('./data/2002.csv', header=True, schema=customSchema)
df3=spark.read.csv('./data/2003.csv', header=True, schema=customSchema)
df4=spark.read.csv('./data/2004.csv', header=True, schema=customSchema)
df5=spark.read.csv('./data/2005.csv', header=True, schema=customSchema)
df7=spark.read.csv('./data/2007.csv', header=True, schema=customSchema)
df8=spark.read.csv('./data/2008.csv', header=True, schema=customSchema)

df0.show()

"""##  Q1: Find the maximal delays for each month of 2008."""

# Analyze by combining ArrDelay and DepDelay
df8 = df8.withColumn("TotalDelay", df8.ArrDelay + df8.DepDelay)
df_max_delay = pd.DataFrame(columns=['Month', 'TotalDelay'])
for i in range (1,13):
  df8_month = df8.filter(df8.Month == i)
  max_total_delay = df8_month.agg({"TotalDelay": "max"}).collect()[0][0]
  print(f"Max total delay in {i}th month : {max_total_delay}")
  df_max_delay = pd.concat([df_max_delay,\
                pd.DataFrame([{'Month':i,'TotalDelay':max_total_delay}])],\
                axis=0, ignore_index=True)
display(df_max_delay)

# Analyze by seperating ArrDelay and DepDelay
"""
df_max_delay = pd.DataFrame(columns=['Month', 'ArrDelay', 'DepDelay'])
for i in range (1,13):
  df8_month = df8.filter(df8.Month == i)
  max_arr_delay = df8_month.agg({"ArrDelay": "max"}).collect()[0][0]
  max_dep_delay = df8_month.agg({"DepDelay": "max"}).collect()[0][0]
  print(f"Max ArrDelay in {i}th month : {max_arr_delay}")
  print(f"Max DepDelay in {i}th month : {max_dep_delay}")
  df_max_delay = pd.concat([df_max_delay,\
                pd.DataFrame([{'Month':i,'ArrDelay':max_arr_delay, 'DepDelay':max_dep_delay}])],\
                axis=0, ignore_index=True)
df_max_delay
"""

"""## Q2: How many flights were delayed caused by security between 2000 ~ 2005? Please show the counting for each year."""

df=[df0,df1,df2,df3,df4,df5]
df_sec_delay = pd.DataFrame(columns=['Year', 'SecDelay'])
for i in range (6):
  security_delay = df[i].filter((df[i].SecurityDelay.isNotNull()) & (df[i].SecurityDelay> 0)).count()
  print(f"Security Delay in 200{i} : {security_delay}")
  df_sec_delay = pd.concat([df_sec_delay,\
                pd.DataFrame([{'Year':2000+i, 'SecDelay':security_delay}])],\
                axis=0, ignore_index=True)
display(df_sec_delay)
print(f"Total security delay from 2000 to 2005 : {df_sec_delay['SecDelay'].sum()}")

print(f"Total security delay from 2000 to 2005 : {df_sec_delay['SecDelay'].sum()}")

df0.groupby('SecurityDelay').count().show()

df1.groupby('SecurityDelay').count().show()

df2.groupby('SecurityDelay').count().show()

"""##  Q3: List Top 5 airports which occur delays most and least in 2007. (Please show the IATA airport code)

"""

df7_arr=df7.filter((df7.ArrDelay.isNotNull()))                #真的有飛機來 不管有沒有delay
df7_arr_delay=df7.filter((df7.ArrDelay.isNotNull()) & (df7.ArrDelay> 0))
df7_dep=df7.filter((df7.DepDelay.isNotNull()))
df7_dep_delay=df7.filter((df7.DepDelay.isNotNull()) & (df7.DepDelay> 0))

arr_count = df7_arr.groupby('Dest').count().withColumnRenamed('Dest', 'arr_Dest')\
                      .withColumnRenamed('count', 'arr_count')
arr_delay_count = df7_arr_delay.groupby('Dest').count().withColumnRenamed('Dest', 'arr_delay_Dest')\
                            .withColumnRenamed('count', 'arr_delay_count')
dep_count = df7_dep.groupby('Origin').count().withColumnRenamed('Origin', 'dep_Origin')\
                        .withColumnRenamed('count', 'dep_count')
dep_delay_count = df7_dep_delay.groupby('Origin').count().withColumnRenamed('Origin', 'dep_delay_Origin')\
                          .withColumnRenamed('count', 'dep_delay_count')

arr = arr_count.join(arr_delay_count, arr_count.arr_Dest == arr_delay_count.arr_delay_Dest, how = 'left')\
        .na.fill(value=0)
arr = arr.withColumn("arrive_delay", 0 + arr.arr_delay_count)\
      .drop("arr_delay_Dest").drop('arr_count').drop('arr_delay_count')
dep = dep_count.join(dep_delay_count, dep_count.dep_Origin == dep_delay_count.dep_delay_Origin, how = 'left')\
        .na.fill(value=0)
dep = dep.withColumn("departure_delay", 0 + dep.dep_delay_count)\
      .drop("dep_delay_Origin").drop('dep_count').drop('dep_delay_count')





total = arr.join(dep, arr.arr_Dest == dep.dep_Origin, 'outer')
total = total.withColumn("total_delay", total.arrive_delay+ total.departure_delay)\
        .drop("dep_Origin").withColumnRenamed('arr_Dest', 'IATA').sort("total_delay")

total_top = total.tail(5)
df_total_top = pd.DataFrame(total_top, columns =['IATA','arrive_delay','departure_delay','total_delay'])
df_total_top = df_total_top.sort_values(by='total_delay', ascending=False)
df_total_top=df_total_top.reset_index()
df_total_top=df_total_top.drop(columns={"index"})
total_least = total.head(5)
df_total_least = pd.DataFrame(total_least, columns =['IATA','arrive_delay','departure_delay','total_delay'])

print("Top 5 airports which occur delays most in 2007")
display(df_total_top)
print("Top 5 airports which occur delays least in 2007")
display(df_total_least)

# only arrive delay
"""
arr_delay = arr.sort("arrive_delay")
arr_top = arr_delay.tail(5)
df_arr_top = pd.DataFrame(arr_top, columns =['IATA', 'arrive_delay'])
df_arr_top = df_arr_top.sort_values(by='arrive_delay', ascending=False)
df_total_top=df_total_top.reset_index()
df_total_top=df_total_top.drop(columns={"index"})
arr_least = arr_delay.head(5)
df_arr_least=pd.DataFrame(arr_least, columns =['IATA', 'arrive_delay'])

print("Top 5 airports which occur delays most in 2007")
display(df_arr_top)
print("Top 5 airports which occur delays least in 2007")
display(df_arr_least)
"""

# only departure delay
"""
dep_delay = dep.sort("departure_delay")

dep_top = dep_delay.tail(5)
df_dep_top = pd.DataFrame(dep_top, columns =['IATA', 'departure_delay'])
df_dep_top = df_dep_top.sort_values(by='departure_delay', ascending=False)
dep_least = dep_delay.head(5)
df_dep_least = pd.DataFrame(dep_least, columns =['IATA', 'departure_delay'])

print("Top 5 airports which occur delays most in 2007")
display(df_dep_top)
print("Top 5 airports which occur delays least in 2007")
display(df_dep_least)
"""

